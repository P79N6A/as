package com.yaoguang.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yaoguang.greendao.entity.UserOwner;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_OWNER".
*/
public class UserOwnerDao extends AbstractDao<UserOwner, Long> {

    public static final String TABLENAME = "USER_OWNER";

    /**
     * Properties of entity UserOwner.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Lid = new Property(0, Long.class, "lid", true, "_id");
        public final static Property IsLogin = new Property(1, int.class, "isLogin", false, "IS_LOGIN");
        public final static Property Id = new Property(2, String.class, "id", false, "ID");
        public final static Property Type = new Property(3, Integer.class, "type", false, "TYPE");
        public final static Property Phone = new Property(4, String.class, "phone", false, "PHONE");
        public final static Property Password = new Property(5, String.class, "password", false, "PASSWORD");
        public final static Property CompanyName = new Property(6, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property Province = new Property(7, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(8, String.class, "city", false, "CITY");
        public final static Property District = new Property(9, String.class, "district", false, "DISTRICT");
        public final static Property CompanyAddress = new Property(10, String.class, "companyAddress", false, "COMPANY_ADDRESS");
        public final static Property Name = new Property(11, String.class, "name", false, "NAME");
        public final static Property Mobile = new Property(12, String.class, "mobile", false, "MOBILE");
        public final static Property ShopLogo = new Property(13, String.class, "shopLogo", false, "SHOP_LOGO");
        public final static Property ShopPhoto = new Property(14, String.class, "shopPhoto", false, "SHOP_PHOTO");
        public final static Property ShopDetail = new Property(15, String.class, "shopDetail", false, "SHOP_DETAIL");
        public final static Property CompanyCode = new Property(16, String.class, "companyCode", false, "COMPANY_CODE");
        public final static Property LicensePhoto = new Property(17, String.class, "licensePhoto", false, "LICENSE_PHOTO");
        public final static Property IdNumber = new Property(18, String.class, "idNumber", false, "ID_NUMBER");
        public final static Property IdPhoto = new Property(19, String.class, "idPhoto", false, "ID_PHOTO");
        public final static Property ApplyStatus = new Property(20, Integer.class, "applyStatus", false, "APPLY_STATUS");
        public final static Property Remark = new Property(21, String.class, "remark", false, "REMARK");
        public final static Property UserId = new Property(22, String.class, "userId", false, "USER_ID");
        public final static Property CreatedBy = new Property(23, String.class, "createdBy", false, "CREATED_BY");
        public final static Property CreatedDeptId = new Property(24, String.class, "createdDeptId", false, "CREATED_DEPT_ID");
        public final static Property UpdatedBy = new Property(25, String.class, "updatedBy", false, "UPDATED_BY");
        public final static Property Created = new Property(26, String.class, "created", false, "CREATED");
        public final static Property UpdatedDeptId = new Property(27, String.class, "updatedDeptId", false, "UPDATED_DEPT_ID");
        public final static Property Updated = new Property(28, String.class, "updated", false, "UPDATED");
        public final static Property IsValid = new Property(29, Integer.class, "isValid", false, "IS_VALID");
        public final static Property DeviceToken = new Property(30, String.class, "deviceToken", false, "DEVICE_TOKEN");
        public final static Property MessageFlag = new Property(31, Integer.class, "messageFlag", false, "MESSAGE_FLAG");
        public final static Property Sex = new Property(32, Integer.class, "sex", false, "SEX");
        public final static Property Email = new Property(33, String.class, "email", false, "EMAIL");
        public final static Property Qq = new Property(34, String.class, "qq", false, "QQ");
        public final static Property Sign = new Property(35, String.class, "sign", false, "SIGN");
        public final static Property Photo = new Property(36, String.class, "photo", false, "PHOTO");
        public final static Property BackgroundPicture = new Property(37, String.class, "backgroundPicture", false, "BACKGROUND_PICTURE");
        public final static Property AuditRemark = new Property(38, String.class, "auditRemark", false, "AUDIT_REMARK");
        public final static Property SingleToken = new Property(39, String.class, "singleToken", false, "SINGLE_TOKEN");
        public final static Property HeadPortrait = new Property(40, String.class, "headPortrait", false, "HEAD_PORTRAIT");
        public final static Property Tel = new Property(41, String.class, "tel", false, "TEL");
    }


    public UserOwnerDao(DaoConfig config) {
        super(config);
    }
    
    public UserOwnerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_OWNER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: lid
                "\"IS_LOGIN\" INTEGER NOT NULL ," + // 1: isLogin
                "\"ID\" TEXT," + // 2: id
                "\"TYPE\" INTEGER," + // 3: type
                "\"PHONE\" TEXT," + // 4: phone
                "\"PASSWORD\" TEXT," + // 5: password
                "\"COMPANY_NAME\" TEXT," + // 6: companyName
                "\"PROVINCE\" TEXT," + // 7: province
                "\"CITY\" TEXT," + // 8: city
                "\"DISTRICT\" TEXT," + // 9: district
                "\"COMPANY_ADDRESS\" TEXT," + // 10: companyAddress
                "\"NAME\" TEXT," + // 11: name
                "\"MOBILE\" TEXT," + // 12: mobile
                "\"SHOP_LOGO\" TEXT," + // 13: shopLogo
                "\"SHOP_PHOTO\" TEXT," + // 14: shopPhoto
                "\"SHOP_DETAIL\" TEXT," + // 15: shopDetail
                "\"COMPANY_CODE\" TEXT," + // 16: companyCode
                "\"LICENSE_PHOTO\" TEXT," + // 17: licensePhoto
                "\"ID_NUMBER\" TEXT," + // 18: idNumber
                "\"ID_PHOTO\" TEXT," + // 19: idPhoto
                "\"APPLY_STATUS\" INTEGER," + // 20: applyStatus
                "\"REMARK\" TEXT," + // 21: remark
                "\"USER_ID\" TEXT," + // 22: userId
                "\"CREATED_BY\" TEXT," + // 23: createdBy
                "\"CREATED_DEPT_ID\" TEXT," + // 24: createdDeptId
                "\"UPDATED_BY\" TEXT," + // 25: updatedBy
                "\"CREATED\" TEXT," + // 26: created
                "\"UPDATED_DEPT_ID\" TEXT," + // 27: updatedDeptId
                "\"UPDATED\" TEXT," + // 28: updated
                "\"IS_VALID\" INTEGER," + // 29: isValid
                "\"DEVICE_TOKEN\" TEXT," + // 30: deviceToken
                "\"MESSAGE_FLAG\" INTEGER," + // 31: messageFlag
                "\"SEX\" INTEGER," + // 32: sex
                "\"EMAIL\" TEXT," + // 33: email
                "\"QQ\" TEXT," + // 34: qq
                "\"SIGN\" TEXT," + // 35: sign
                "\"PHOTO\" TEXT," + // 36: photo
                "\"BACKGROUND_PICTURE\" TEXT," + // 37: backgroundPicture
                "\"AUDIT_REMARK\" TEXT," + // 38: auditRemark
                "\"SINGLE_TOKEN\" TEXT," + // 39: singleToken
                "\"HEAD_PORTRAIT\" TEXT," + // 40: headPortrait
                "\"TEL\" TEXT);"); // 41: tel
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_OWNER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserOwner entity) {
        stmt.clearBindings();
 
        Long lid = entity.getLid();
        if (lid != null) {
            stmt.bindLong(1, lid);
        }
        stmt.bindLong(2, entity.getIsLogin());
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(4, type);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(6, password);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(7, companyName);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(8, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(9, city);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(10, district);
        }
 
        String companyAddress = entity.getCompanyAddress();
        if (companyAddress != null) {
            stmt.bindString(11, companyAddress);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(12, name);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(13, mobile);
        }
 
        String shopLogo = entity.getShopLogo();
        if (shopLogo != null) {
            stmt.bindString(14, shopLogo);
        }
 
        String shopPhoto = entity.getShopPhoto();
        if (shopPhoto != null) {
            stmt.bindString(15, shopPhoto);
        }
 
        String shopDetail = entity.getShopDetail();
        if (shopDetail != null) {
            stmt.bindString(16, shopDetail);
        }
 
        String companyCode = entity.getCompanyCode();
        if (companyCode != null) {
            stmt.bindString(17, companyCode);
        }
 
        String licensePhoto = entity.getLicensePhoto();
        if (licensePhoto != null) {
            stmt.bindString(18, licensePhoto);
        }
 
        String idNumber = entity.getIdNumber();
        if (idNumber != null) {
            stmt.bindString(19, idNumber);
        }
 
        String idPhoto = entity.getIdPhoto();
        if (idPhoto != null) {
            stmt.bindString(20, idPhoto);
        }
 
        Integer applyStatus = entity.getApplyStatus();
        if (applyStatus != null) {
            stmt.bindLong(21, applyStatus);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(22, remark);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(23, userId);
        }
 
        String createdBy = entity.getCreatedBy();
        if (createdBy != null) {
            stmt.bindString(24, createdBy);
        }
 
        String createdDeptId = entity.getCreatedDeptId();
        if (createdDeptId != null) {
            stmt.bindString(25, createdDeptId);
        }
 
        String updatedBy = entity.getUpdatedBy();
        if (updatedBy != null) {
            stmt.bindString(26, updatedBy);
        }
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(27, created);
        }
 
        String updatedDeptId = entity.getUpdatedDeptId();
        if (updatedDeptId != null) {
            stmt.bindString(28, updatedDeptId);
        }
 
        String updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindString(29, updated);
        }
 
        Integer isValid = entity.getIsValid();
        if (isValid != null) {
            stmt.bindLong(30, isValid);
        }
 
        String deviceToken = entity.getDeviceToken();
        if (deviceToken != null) {
            stmt.bindString(31, deviceToken);
        }
 
        Integer messageFlag = entity.getMessageFlag();
        if (messageFlag != null) {
            stmt.bindLong(32, messageFlag);
        }
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(33, sex);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(34, email);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(35, qq);
        }
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(36, sign);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(37, photo);
        }
 
        String backgroundPicture = entity.getBackgroundPicture();
        if (backgroundPicture != null) {
            stmt.bindString(38, backgroundPicture);
        }
 
        String auditRemark = entity.getAuditRemark();
        if (auditRemark != null) {
            stmt.bindString(39, auditRemark);
        }
 
        String singleToken = entity.getSingleToken();
        if (singleToken != null) {
            stmt.bindString(40, singleToken);
        }
 
        String headPortrait = entity.getHeadPortrait();
        if (headPortrait != null) {
            stmt.bindString(41, headPortrait);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(42, tel);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserOwner entity) {
        stmt.clearBindings();
 
        Long lid = entity.getLid();
        if (lid != null) {
            stmt.bindLong(1, lid);
        }
        stmt.bindLong(2, entity.getIsLogin());
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(4, type);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(6, password);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(7, companyName);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(8, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(9, city);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(10, district);
        }
 
        String companyAddress = entity.getCompanyAddress();
        if (companyAddress != null) {
            stmt.bindString(11, companyAddress);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(12, name);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(13, mobile);
        }
 
        String shopLogo = entity.getShopLogo();
        if (shopLogo != null) {
            stmt.bindString(14, shopLogo);
        }
 
        String shopPhoto = entity.getShopPhoto();
        if (shopPhoto != null) {
            stmt.bindString(15, shopPhoto);
        }
 
        String shopDetail = entity.getShopDetail();
        if (shopDetail != null) {
            stmt.bindString(16, shopDetail);
        }
 
        String companyCode = entity.getCompanyCode();
        if (companyCode != null) {
            stmt.bindString(17, companyCode);
        }
 
        String licensePhoto = entity.getLicensePhoto();
        if (licensePhoto != null) {
            stmt.bindString(18, licensePhoto);
        }
 
        String idNumber = entity.getIdNumber();
        if (idNumber != null) {
            stmt.bindString(19, idNumber);
        }
 
        String idPhoto = entity.getIdPhoto();
        if (idPhoto != null) {
            stmt.bindString(20, idPhoto);
        }
 
        Integer applyStatus = entity.getApplyStatus();
        if (applyStatus != null) {
            stmt.bindLong(21, applyStatus);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(22, remark);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(23, userId);
        }
 
        String createdBy = entity.getCreatedBy();
        if (createdBy != null) {
            stmt.bindString(24, createdBy);
        }
 
        String createdDeptId = entity.getCreatedDeptId();
        if (createdDeptId != null) {
            stmt.bindString(25, createdDeptId);
        }
 
        String updatedBy = entity.getUpdatedBy();
        if (updatedBy != null) {
            stmt.bindString(26, updatedBy);
        }
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(27, created);
        }
 
        String updatedDeptId = entity.getUpdatedDeptId();
        if (updatedDeptId != null) {
            stmt.bindString(28, updatedDeptId);
        }
 
        String updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindString(29, updated);
        }
 
        Integer isValid = entity.getIsValid();
        if (isValid != null) {
            stmt.bindLong(30, isValid);
        }
 
        String deviceToken = entity.getDeviceToken();
        if (deviceToken != null) {
            stmt.bindString(31, deviceToken);
        }
 
        Integer messageFlag = entity.getMessageFlag();
        if (messageFlag != null) {
            stmt.bindLong(32, messageFlag);
        }
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(33, sex);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(34, email);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(35, qq);
        }
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(36, sign);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(37, photo);
        }
 
        String backgroundPicture = entity.getBackgroundPicture();
        if (backgroundPicture != null) {
            stmt.bindString(38, backgroundPicture);
        }
 
        String auditRemark = entity.getAuditRemark();
        if (auditRemark != null) {
            stmt.bindString(39, auditRemark);
        }
 
        String singleToken = entity.getSingleToken();
        if (singleToken != null) {
            stmt.bindString(40, singleToken);
        }
 
        String headPortrait = entity.getHeadPortrait();
        if (headPortrait != null) {
            stmt.bindString(41, headPortrait);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(42, tel);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserOwner readEntity(Cursor cursor, int offset) {
        UserOwner entity = new UserOwner( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // lid
            cursor.getInt(offset + 1), // isLogin
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // password
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // companyName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // province
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // city
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // district
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // companyAddress
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // name
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // mobile
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // shopLogo
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // shopPhoto
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // shopDetail
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // companyCode
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // licensePhoto
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // idNumber
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // idPhoto
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // applyStatus
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // remark
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // userId
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // createdBy
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // createdDeptId
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // updatedBy
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // created
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // updatedDeptId
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // updated
            cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29), // isValid
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // deviceToken
            cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31), // messageFlag
            cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32), // sex
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // email
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // qq
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // sign
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // photo
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // backgroundPicture
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // auditRemark
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // singleToken
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // headPortrait
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41) // tel
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserOwner entity, int offset) {
        entity.setLid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsLogin(cursor.getInt(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPassword(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCompanyName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setProvince(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCity(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDistrict(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCompanyAddress(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMobile(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setShopLogo(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setShopPhoto(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setShopDetail(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCompanyCode(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLicensePhoto(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIdNumber(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setIdPhoto(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setApplyStatus(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setRemark(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setUserId(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCreatedBy(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setCreatedDeptId(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setUpdatedBy(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setCreated(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setUpdatedDeptId(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setUpdated(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setIsValid(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
        entity.setDeviceToken(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setMessageFlag(cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31));
        entity.setSex(cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32));
        entity.setEmail(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setQq(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setSign(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setPhoto(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setBackgroundPicture(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setAuditRemark(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setSingleToken(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setHeadPortrait(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setTel(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserOwner entity, long rowId) {
        entity.setLid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserOwner entity) {
        if(entity != null) {
            return entity.getLid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserOwner entity) {
        return entity.getLid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
