package com.yaoguang.boss.activity;

import android.databinding.DataBindingUtil;
import android.os.Bundle;
import android.support.v4.widget.NestedScrollView;
import android.view.MotionEvent;
import android.view.View;

import com.yaoguang.boss.R;
import com.yaoguang.boss.databinding.TestBinding;

import java.util.ArrayList;
import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;
import lecho.lib.hellocharts.gesture.ContainerScrollType;
import lecho.lib.hellocharts.gesture.ZoomType;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Column;
import lecho.lib.hellocharts.model.ColumnChartData;
import lecho.lib.hellocharts.model.ComboLineColumnChartData;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.model.SubcolumnValue;
import lecho.lib.hellocharts.util.ChartUtils;
import lecho.lib.hellocharts.view.ComboLineColumnChartView;
import me.yokeyword.fragmentation.SupportActivity;

/**
 * 测试图表
 * Created by zhongjh on 2017/11/23.
 */
public class TestActivity extends SupportActivity {
    private TestBinding dataBinding;

    String[] mBottomData = new String[]{"2017年6月", "2017年7月", "2017年8月", "2017年9月", "2017年10月", "2017年11月", "2017年12月", "2018年1月", "2018年1月", "2018年1月", "2018年1月", "2018年1月"}; // 底部数据源
    List<AxisValue> mAxisYValues = new ArrayList<>(); // y轴列表
    List<AxisValue> mAxisYRightValues = new ArrayList<>(); // 右边的线型数据

    int[] mBottomDataColumnColors = new int[]{R.color.red500, R.color.blue500, R.color.black_666666, R.color.green_accent};// 每一列的颜色
    int mBottomDataColumns = mBottomDataColumnColors.length; // 柱状每行4列,
    private int numberOfLines = 1; // 线行图只有一条
    private int maxNumberOfLines = 4; // 限制最多多少条
    private int numberOfPoints = mBottomData.length;// 每条线行图涉及多少行
    float[][] randomNumbersTab = new float[maxNumberOfLines][numberOfPoints];

    boolean hasAxes = true; // 是否显示轴
    boolean hasAxesNames = true; //
    boolean mHasLabels = false;// 是否显示标签
    boolean mHasLabelsOnlyForSelected = false;// 只有选定的标签 //TODO
    boolean mStacked = true; // 柱状是否堆叠
    boolean mIsCubic = true; // 线性是否立方形态，或者平滑形态
    boolean mHasLines = true; // 是否有线条
    boolean mHasPoints = true; // 线条是否有点


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        dataBinding = DataBindingUtil.setContentView(TestActivity.this, R.layout.test);
//        ButterKnife.bind(this);

        initChart1();// 3层数据嵌套
    }


    /**
     * 3层数据嵌套
     */
    private void initChart1() {
        // 这是解决跟滑动界面冲突的
        dataBinding.chart.setOnTouchListener(new View.OnTouchListener() {

            @Override
            public boolean onTouch(View v, MotionEvent event) {
                int n = event.getPointerCount();
                if (n == 1) {
                    //允许ScrollView截断点击事件，ScrollView可滑动
                    dataBinding.nsvMain.requestDisallowInterceptTouchEvent(false);
                } else {
                    //不允许ScrollView截断点击事件，点击事件由子View处理
                    dataBinding.nsvMain.requestDisallowInterceptTouchEvent(true);
                }
                return false;
            }


        });


        ComboLineColumnChartData comboLineColumnChartData = new ComboLineColumnChartData(generateColumnData(), generateLineData());

        if (hasAxes) {
            // 设置底部数据源，底部名称
            Axis axisX = new Axis();
            axisX.setAutoGenerated(false);// 设置是否自动生成轴对象，自动适应表格的范围。
            axisX.setName("月份"); // 名称
//            axisX.setFormatter();// 样式
            axisX.setValues(mAxisYValues);// 数据源
//            axisX.setTypeface();// 字体格式
//            axisX.setTextSize(10);// 字体大小,默认为12sp。
//            axisX.setTextColor(); // 字体颜色
//            axisX.setMaxLabelChars(mAxisYValues.size()); // 最大标签字符,可以不需要设置，但是如果是中文字符过长的话....
//            axisX.setLineColor();// 线条颜色
//            axisX.setInside(false); // 在(圆柱)里面或者外面
            axisX.setHasTiltedLabels(true);// 显示标题标签,false为横向显示，true则会以倾斜方式显示，但是有可能还是会被下面的“Name”挡住
//            axisX.setHasSeparationLine(false);// 分离线
            comboLineColumnChartData.setAxisXBottom(axisX);

            Axis axisLeftY = new Axis();
            axisLeftY.setName("营收费用(元)");
            comboLineColumnChartData.setAxisYLeft(axisLeftY);

//            Axis axisRightY = new Axis();
//            axisRightY.setName("单位(个)");
//            axisRightY.setValues(mAxisYRightValues).setHasLines(true).setMaxLabelChars(4);
//            axisRightY.setAutoGenerated(true);
//            comboLineColumnChartData.setAxisYRight(axisRightY);
        } else {
            comboLineColumnChartData.setAxisXBottom(null);
            comboLineColumnChartData.setAxisYLeft(null);
        }

        // 设置行为属性，支持缩放、滑动以及平移
        dataBinding.chart.setZoomEnabled(false);// 手势缩放
        dataBinding.chart.setScrollEnabled(true);// 设置是否可滑动
        dataBinding.chart.setInteractive(true);//设置图表是可以交互的（拖拽，缩放等效果的前提）
        dataBinding.chart.setZoomType(ZoomType.HORIZONTAL);//设置缩放方向
        dataBinding.chart.setMaxZoom((float) 4);//最大方法比例
        dataBinding.chart.setContainerScrollEnabled(true, ContainerScrollType.HORIZONTAL);

        // 数据源
        dataBinding.chart.setComboLineColumnChartData(comboLineColumnChartData);
        dataBinding.chart.setZoomLevel(0, 0, 5);

//        //固定Y轴的范围,如果没有这个,Y轴的范围会根据数据的最大值和最小值决定
//        Viewport viewport = new Viewport(dataBinding.chart.getMaximumViewport());
//        v.bottom = minY;
//        v.top = maxY;
//        dataBinding.chart.setMaximumViewport(v);
//
//        //这2个属性的设置一定要在lineChart.setMaximumViewport(v);这个方法之后,不然显示的坐标数据是不能左右滑动查看更多数据的
//        v.left = totalDays - 7;
//        v.right = totalDays - 1;
//        dataBinding.chart.setCurrentViewport(v);

    }

    /**
     * 双层柱状数据嵌套,模拟数据
     */
    private ColumnChartData generateColumnData() {

        int numColumns = mBottomData.length;

        List<Column> columns = new ArrayList<>();
        List<SubcolumnValue> values;
        for (int i = 0; i < numColumns; ++i) {

            values = new ArrayList<>();
            for (int j = 0; j < mBottomDataColumns; j++) {
                values.add(new SubcolumnValue((float) Math.random() * 50000 + 5, getResources().getColor(mBottomDataColumnColors[j])));
            }

            mAxisYValues.add(new AxisValue(i).setLabel(mBottomData[i]));

            Column column = new Column(values);
            column.setHasLabels(mHasLabels);
            column.setHasLabelsOnlyForSelected(mHasLabelsOnlyForSelected);
            columns.add(column);
        }

        ColumnChartData columnChartData = new ColumnChartData(columns);
        columnChartData.setStacked(mStacked);
        return columnChartData;
    }

    /**
     * 赋值线行数据
     */
    private void generateValues() {
        for (int i = 0; i < maxNumberOfLines; ++i) {
            for (int j = 0; j < numberOfPoints; ++j) {
                randomNumbersTab[i][j] = (float) Math.random() * 50f + 5;
            }
        }
    }

    /**
     * 生成线行图
     */
    private LineChartData generateLineData() {
        generateValues();
        List<Line> lines = new ArrayList<>();
        for (int i = 0; i < numberOfLines; ++i) {

            List<PointValue> values = new ArrayList<>();
            for (int j = 0; j < numberOfPoints; ++j) {
                values.add(new PointValue(j, randomNumbersTab[i][j]));
                mAxisYRightValues.add(new AxisValue(i).setValue(randomNumbersTab[i][j]));
            }

            Line line = new Line(values);
            line.setColor(ChartUtils.COLORS[i]);
            line.setCubic(mIsCubic);
            line.setHasLabels(mHasLabels);
            line.setHasLines(mHasLines);
            line.setHasPoints(mHasPoints);
            lines.add(line);
        }

        return new LineChartData(lines);
    }


//    class ViewHolder {
//        public View rootView;
//        public ComboLineColumnChartView chart;
//        public ComboLineColumnChartView chart2;
//        public ComboLineColumnChartView chart3;
//        public ComboLineColumnChartView chart4;
//        public NestedScrollView nsvMain;
//
//        public ViewHolder() {
//            this.chart = findViewById(R.id.chart);
//            this.chart2 = findViewById(R.id.chart2);
//            this.chart3 = findViewById(R.id.chart3);
//            this.chart4 = findViewById(R.id.chart4);
//            this.nsvMain = findViewById(R.id.nsvMain);
//        }
//
//    }
}
